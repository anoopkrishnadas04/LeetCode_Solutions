/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int sum = 0;
        int carry = 0;
        ListNode* curr1 = l1;
        ListNode* curr2 = l2;

        while(true){
            sum = curr1->val + curr2->val + carry;
            carry = sum / 10;
            sum = sum % 10;
            curr1->val = sum;

            if(curr1->next == nullptr && curr2->next == nullptr && carry == 0) break;

            if(curr1->next == nullptr) curr1->next = new ListNode();
            if(curr2->next == nullptr) curr2->next = new ListNode();

            curr1 = curr1->next;
            curr2 = curr2->next;
        }

        /*
        while(curr1->next != nullptr || curr2->next != nullptr || carry != 0){
            if (curr1 == nullptr && curr2 == nullptr){
                curr1 = new ListNode();
                curr2 = new ListNode();
            } else if (curr1 == nullptr){
              curr1 = new ListNode();
            } else if (curr2 == nullptr) {
              curr2 = new ListNode();
            }
            
            sum = curr1->val + curr2->val + carry;
            carry = sum / 10;
            sum = sum % 10;
            curr1->val = sum;
            
            if(curr1->next == nullptr)
                curr1->next = new ListNode();
            if(curr1->next == nullptr)
                curr2->next = new ListNode();

            curr1 = curr1->next;
            curr2 = curr2->next;
        }
        */

        return l1;
    }
};
